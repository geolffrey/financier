0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.21
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /home/help/.npm/3a52ce78-.lock
10 verbose tar pack [ '/home/help/.npm/financier/0.1.1/package.tgz', '.' ]
11 verbose tarball /home/help/.npm/financier/0.1.1/package.tgz
12 verbose folder .
13 info prepublish financier@0.1.1
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /home/help/.npm/1f1177db-tar.lock
16 silly lockFile 7f99a181--npm-financier-0-1-1-package-tgz tar:///home/help/.npm/financier/0.1.1/package.tgz
17 verbose lock tar:///home/help/.npm/financier/0.1.1/package.tgz /home/help/.npm/7f99a181--npm-financier-0-1-1-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 7f99a181--npm-financier-0-1-1-package-tgz tar:///home/help/.npm/financier/0.1.1/package.tgz
21 silly lockFile 7f99a181--npm-financier-0-1-1-package-tgz tar:///home/help/.npm/financier/0.1.1/package.tgz
22 silly lockFile 3cb78ac7-help-npm-financier-0-1-1-package /home/help/.npm/financier/0.1.1/package
23 verbose lock /home/help/.npm/financier/0.1.1/package /home/help/.npm/3cb78ac7-help-npm-financier-0-1-1-package.lock
24 silly lockFile 3cb78ac7-help-npm-financier-0-1-1-package /home/help/.npm/financier/0.1.1/package
25 silly lockFile 3cb78ac7-help-npm-financier-0-1-1-package /home/help/.npm/financier/0.1.1/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'financier',
28 silly publish   description: 'A Node.js module that helps with calculations concerning stocks and portfolios.',
28 silly publish   author: { name: 'Alexander Martin', email: 'alex@suitupalex.com' },
28 silly publish   version: '0.1.1',
28 silly publish   homepage: 'https://github.com/suitupalex/financier',
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/suitupalex/financier.git' },
28 silly publish   keywords: [ 'finance', 'portfolio', 'stock', 'accounting', 'risk', 'money' ],
28 silly publish   dependencies: { sylvester: '>= 0.0.21' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/suitupalex/financier/issues' },
28 silly publish   main: 'financier.js',
28 silly publish   directories: { doc: 'docs' },
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   readme: 'Financier\n=========\n\nA Node.js module that helps with calculations concerning stocks and portfolios.\n\n## Introduction\n\nFinancier is a simple, object-oriented way of managing a portfolio.  This module\nwas built to calculate the risk in the [Bridge Jump Portfolio Management game](http://jump.bridge-usa.com).\n\nPlease feel free to request any features.  Code contributions are always welcome!\n\n## Mirrors\n[Bitbucket](https://bitbucket.org/suitupalex/financier) | [Github](https://github.com/suitupalex/financier)\n\n## Installation\n\n`$ npm install financier`\n\nFinancier uses the [Sylvester matrix math library](https://github.com/NaturalNode/node-sylvester)\nfor calculations.  NPM will automatically install Sylvester as a dependency.\n\n```js\nvar financier = require(\'financier\');\nvar Stock = financier.Stock;\nvar Portfolio = financier.Portfolio;\n```\n\n## Usage\nHere is an example featuring comprehensive usage of Financier.\n\n```js\n// Load financier.\nvar financier = require(\'financier\');\nvar Stock = financier.Stock;\nvar Portfolio = financier.Portfolio;\n\nvar stocks = {};\n// A bit of pseudo-code to load return data from a CSV.\nvar stockData = CSV.load(\'nasdaq-historical-returns.csv\');\n\n// Initialize the stocks.\nfor (var stock in stockData) {\n    stocks[stock] = new Stock(stock);\n    for (var tick in stockData[stock]) {\n        stocks[stock].push(tick.open, tick.close, true);\n    }\n    stocks[stock].calculateAverage();\n}\n\n// Gather the securities for the portfolio.\nvar securities = [\n    {\n        stock: stocks.AAPL,\n        value: 10234.34\n    },\n    {\n        stock: stocks.GOOG,\n        value: 63464.53\n    },\n    {\n        stock: stocks.MSFT,\n        value: 4352.2\n    },\n    {\n        stock: stocks.AIG,\n        value: 630.99,\n    },\n    {\n        stock: stocks.C,\n        value: 902.11\n    }\n];\n\n// Build the portfolio.\nvar clientPortfolio = new Portfolio();\nfor (var i = 0; i < securities.length; i++) {\n    var security = securities[i];\n    clientPortfolio.addStock(security.stock, security.value, true);\n}\n\n// Spit out the risk.\nconsole.log(clientPortfolio.calculateRisk());\n```\n\n## API\n\n### Stock(_String_ ticker)\n\nUsed to calculate returns and averages for individual stocks.  The parameter\n`ticker` determines the stock symbol for the stock.\n\n```js\nvar AAPL = new Stock(\'AAPL\');\n```\n#### Properties\n\n* __ticker__ - `String` The stock symbol.\n* __returns__ - `Array` The array of tick returns for the stock.\n* __average__ - `Float` The average of all the tick returns.\n* __value__ - `Float` The market value of the stock. (Initialized when added to a\nportfolio.)\n* __weight__ - `Float` The weight of the stock in comparison to the total portfolio\nmarket value.  (Initialized when added to a portfolio.)\n\n#### Stock.push(_Float_ open, _Float_ close, _Boolean_ _[Opt]_ wait)\nAdd a tick of data to the stock history.  This new return is stored in\n`Stock.returns`.  Default behaviour immediately recalculates the overall average on\nreturns.\n\nThe parameters `open` and `close` are `floats` representing the price of the stock.\nIf `wait` is `true`, the average is not calculated.\n\n```js\n// Push a return of 5.8 to the list of returns.  The overall average return will\n// be automagically calculated.\nAAPL.push(106.5, 112.3);\n```\n\n#### _Float_ Stock.calculateAverage()\nCalculate the average of all the returns.  This new average is both returned and\nstored in `Stock.average`.\n\nIt is only necessary to call this function if you are adding returns in bulk.\n\n```js\nfunction randomValue() {\n    return 100 + Math.random() * 30;\n}\n\n// Simulate adding thousands of returns to a stock.\nfor (var i = 0; i < 10000; i++) {\n    // Push the data, but hold off on calculating the average.\n    AAPL.push(randomValue(), randomValue(), true);\n}\n\n// Now calculate the overall average.\nAAPL.calculateAverage();\n```\n\n### Portfolio()\n\nKeeps data on a portfolio, and has methods to calculate its attributes.\n\n```js\nvar clientPortfolio = new Portfolio();\n```\n\n#### Properties\n\n* __stocks__ - `Object` Stocks included in the portfolio.\n* __value__ - `Float` Total market value for the stock.\n* __risk__ - `Float` Risk for the entire portfolio.\n* __cache__ - `Cache` Cache of portfolio securities.\n\n#### Portfolio.addStock(_Stock_ stock, _Float_ value, _Boolean_ _[Opt]_ clone)\nAdd a stock to the portfolio.  This stock is stored in the `Portfolio.stocks`.\n`Stock.weight` for all securities are automagically recalculated.\n\nThe parameter `stock` is the `Stock` object being added.  `value` represents the\nmarket value for the security as a `float`.  Currency should be kept consistent.\nIf `clone` is `true`, a new `Stock` is created with identical `Stock.ticker`,\n`Stock.return`, and `Stock.average` properties.\n\n__IMPORTANT:__ If stocks are reused in multiple portfolios, or need to be kept\nindependent of the portfolio, they _MUST_ be cloned to prevent discrepencies with\nhow JavaScript passes objects by reference.\n\n```js\n// Add AAPL to multiple client portfolios:\nclientPortfolio.addStock(AAPL, 100323.33, true);\notherClientPortfolio.addStock(AAPL, 1483.63, true);\n\nvar open = 135.3;\nvar close = 123.53;\n\n// If new return history needs to be added, it must be done individually.\nAAPL.push(open, close);\nclientPortfolio.stocks.AAPL.push(open, close);\notherClientPortfolio.stocks.AAPL.push(open, close);\n```\n\n#### Portfolio.removeStock(_Stock|String_ stock)\nRemove a stock from the portfolio.  `Portfolio.stocks` is updated.  Additionally,\n`Stock.weight` for all stocks are recalculated.\n\n```js\n// Both of these are valid:\nclientPortfolio.removeStock(\'AAPL\');\nclientPortfolio.removeStock(AAPL);\n```\n\n#### Portfolio.updateStock(_Stock|String_ stock, _Float_ value)\nUpdate a stock with a new market value.  Weights for all the stocks are recalculated.\nHowever, the new value is not validated.  Stocks are not deleted if the value is 0 or\nnegative.\n\n#### _Array_ Portfolio.getStockTickers()\nGet the tickers for all the stocks in the portfolio.\n\n#### _Boolean_ Portfolio.hasStock(_Stock|String_ stock)\nChecks if the stock is currently in the portfolio.\n\n#### _Float_ Portfolio.calculateTotalValue()\nCalculate the total market value of the portfolio.  `Portfolio.value` is updated, as\nwell as returned.  This function is called everytime `Portfolio.calculateWeights()`\nis called.\n\n#### Portfolio.calculateWeights()\nCalculate and update `Stock.weight` for all securities in the portfolio.  This\nfunction is called whenever securities in the portfolio are altered.\n\n#### _Float_ Portfolio.calculateCovariance(_Stock_ stockA, _Stock_ stockB)\nCalculate the covariance between two stocks.  If `stockA` and `stockB` are the same\ninstance of `Stock` the function returns 1 by definition.\n\nWhile it is better to create a `Portfolio` to calculate covariance, this function can\nbe called to examine individual stocks.\n\n```js\nvar GOOG = new Stock(\'GOOG\');\nvar AAPL = new Stock(\'AAPL\');\n\n// Pretend that we have filled out the stocks with tick history...\nGOOG.push(...);\nAAPL.push(...);\n\n// Find the covariance between Google and Apple.\nvar covariance = Portfolio.calculateCovariance(GOOG, AAPL);\n```\n\n#### _Sylvester.Matrix_ Portfolio.createWeightMatrix()\nCreate the matrix of security weights.  We do not use `Sylvestor.Vector` because it does\nnot have a transpose method.  `Portfolio.calculateRisk()` calls this function.\n\n#### _Sylvester.Matrix_ Portfolio.createCovarianceMatrix()\nCreate the covariance matrix of all securities.  `Portfolio.caulcateCovariance()` is called\nfor every possible pair of securities.  `Portfolio.calculateRisk()` calls this function.\n\n#### _Float_ Portfolio.calculateRisk()\nCalculate risk for the entire portfolio.  We first check against `Portfolio.cache` to prevent any\nunnecessary work (i.e. securities have not been altered since last time the risk was calculated).\n`Portfolio.cache` and `Portfolio.risk` are then updated.\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '1b8811b88fda9ec9372a1a4ec071cf134ce74ccf',
28 silly publish   _id: 'financier@0.1.1',
28 silly publish   _shasum: '7f4dd90447354ea968856001a99501064251c1c8',
28 silly publish   _from: '.' }
29 verbose request where is /financier
30 verbose request registry https://registry.npmjs.org/
31 verbose request id e9e5fff02fbdfc37
32 verbose url raw /financier
33 verbose url resolving [ 'https://registry.npmjs.org/', './financier' ]
34 verbose url resolved https://registry.npmjs.org/financier
35 verbose request where is https://registry.npmjs.org/financier
36 info trying registry request attempt 1 at 18:14:51
37 http PUT https://registry.npmjs.org/financier
38 http 403 https://registry.npmjs.org/financier
39 verbose headers { date: 'Thu, 21 Aug 2014 23:14:52 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '11709',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-ord1727-ORD',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1408662892.007604,VS0,VE406',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.1.1
41 error old={"name":"financier","description":"A Node.js module that helps with calculations concerning stocks and portfolios.","author":{"name":"Alexander Martin","email":"alex@martinexp.com"},"version":"0.1.1","homepage":"https://github.com/bridge-usa/financier","repository":{"type":"git","url":"https://github.com/bridge-usa/financier.git"},"keywords":["finance","portfolio","stock","accounting","risk","money"],"dependencies":{"sylvester":">= 0.0.21"},"license":"MIT","bugs":{"url":"https://github.com/bridge-usa/financier/issues"},"main":"financier.js","directories":{"doc":"docs"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"_id":"financier@0.1.1","dist":{"shasum":"82e4a3633edbe05af7d23d5a7a030d7ae99517dc","tarball":"http://registry.npmjs.org/financier/-/financier-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"suit-up","email":"alex@martinexp.com"},"maintainers":[{"name":"suit-up","email":"alex@martinexp.com"}]}
41 error new={"name":"financier","description":"A Node.js module that helps with calculations concerning stocks and portfolios.","author":{"name":"Alexander Martin","email":"alex@suitupalex.com"},"version":"0.1.1","homepage":"https://github.com/suitupalex/financier","repository":{"type":"git","url":"https://github.com/suitupalex/financier.git"},"keywords":["finance","portfolio","stock","accounting","risk","money"],"dependencies":{"sylvester":">= 0.0.21"},"license":"MIT","bugs":{"url":"https://github.com/suitupalex/financier/issues"},"main":"financier.js","directories":{"doc":"docs"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"readme":"Financier\u000a=========\u000a\u000aA Node.js module that helps with calculations concerning stocks and portfolios.\u000a\u000a## Introduction\u000a\u000aFinancier is a simple, object-oriented way of managing a portfolio.  This module\u000awas built to calculate the risk in the [Bridge Jump Portfolio Management game](http://jump.bridge-usa.com).\u000a\u000aPlease feel free to request any features.  Code contributions are always welcome!\u000a\u000a## Mirrors\u000a[Bitbucket](https://bitbucket.org/suitupalex/financier) | [Github](https://github.com/suitupalex/financier)\u000a\u000a## Installation\u000a\u000a`$ npm install financier`\u000a\u000aFinancier uses the [Sylvester matrix math library](https://github.com/NaturalNode/node-sylvester)\u000afor calculations.  NPM will automatically install Sylvester as a dependency.\u000a\u000a```js\u000avar financier = require('financier');\u000avar Stock = financier.Stock;\u000avar Portfolio = financier.Portfolio;\u000a```\u000a\u000a## Usage\u000aHere is an example featuring comprehensive usage of Financier.\u000a\u000a```js\u000a// Load financier.\u000avar financier = require('financier');\u000avar Stock = financier.Stock;\u000avar Portfolio = financier.Portfolio;\u000a\u000avar stocks = {};\u000a// A bit of pseudo-code to load return data from a CSV.\u000avar stockData = CSV.load('nasdaq-historical-returns.csv');\u000a\u000a// Initialize the stocks.\u000afor (var stock in stockData) {\u000a    stocks[stock] = new Stock(stock);\u000a    for (var tick in stockData[stock]) {\u000a        stocks[stock].push(tick.open, tick.close, true);\u000a    }\u000a    stocks[stock].calculateAverage();\u000a}\u000a\u000a// Gather the securities for the portfolio.\u000avar securities = [\u000a    {\u000a        stock: stocks.AAPL,\u000a        value: 10234.34\u000a    },\u000a    {\u000a        stock: stocks.GOOG,\u000a        value: 63464.53\u000a    },\u000a    {\u000a        stock: stocks.MSFT,\u000a        value: 4352.2\u000a    },\u000a    {\u000a        stock: stocks.AIG,\u000a        value: 630.99,\u000a    },\u000a    {\u000a        stock: stocks.C,\u000a        value: 902.11\u000a    }\u000a];\u000a\u000a// Build the portfolio.\u000avar clientPortfolio = new Portfolio();\u000afor (var i = 0; i < securities.length; i++) {\u000a    var security = securities[i];\u000a    clientPortfolio.addStock(security.stock, security.value, true);\u000a}\u000a\u000a// Spit out the risk.\u000aconsole.log(clientPortfolio.calculateRisk());\u000a```\u000a\u000a## API\u000a\u000a### Stock(_String_ ticker)\u000a\u000aUsed to calculate returns and averages for individual stocks.  The parameter\u000a`ticker` determines the stock symbol for the stock.\u000a\u000a```js\u000avar AAPL = new Stock('AAPL');\u000a```\u000a#### Properties\u000a\u000a* __ticker__ - `String` The stock symbol.\u000a* __returns__ - `Array` The array of tick returns for the stock.\u000a* __average__ - `Float` The average of all the tick returns.\u000a* __value__ - `Float` The market value of the stock. (Initialized when added to a\u000aportfolio.)\u000a* __weight__ - `Float` The weight of the stock in comparison to the total portfolio\u000amarket value.  (Initialized when added to a portfolio.)\u000a\u000a#### Stock.push(_Float_ open, _Float_ close, _Boolean_ _[Opt]_ wait)\u000aAdd a tick of data to the stock history.  This new return is stored in\u000a`Stock.returns`.  Default behaviour immediately recalculates the overall average on\u000areturns.\u000a\u000aThe parameters `open` and `close` are `floats` representing the price of the stock.\u000aIf `wait` is `true`, the average is not calculated.\u000a\u000a```js\u000a// Push a return of 5.8 to the list of returns.  The overall average return will\u000a// be automagically calculated.\u000aAAPL.push(106.5, 112.3);\u000a```\u000a\u000a#### _Float_ Stock.calculateAverage()\u000aCalculate the average of all the returns.  This new average is both returned and\u000astored in `Stock.average`.\u000a\u000aIt is only necessary to call this function if you are adding returns in bulk.\u000a\u000a```js\u000afunction randomValue() {\u000a    return 100 + Math.random() * 30;\u000a}\u000a\u000a// Simulate adding thousands of returns to a stock.\u000afor (var i = 0; i < 10000; i++) {\u000a    // Push the data, but hold off on calculating the average.\u000a    AAPL.push(randomValue(), randomValue(), true);\u000a}\u000a\u000a// Now calculate the overall average.\u000aAAPL.calculateAverage();\u000a```\u000a\u000a### Portfolio()\u000a\u000aKeeps data on a portfolio, and has methods to calculate its attributes.\u000a\u000a```js\u000avar clientPortfolio = new Portfolio();\u000a```\u000a\u000a#### Properties\u000a\u000a* __stocks__ - `Object` Stocks included in the portfolio.\u000a* __value__ - `Float` Total market value for the stock.\u000a* __risk__ - `Float` Risk for the entire portfolio.\u000a* __cache__ - `Cache` Cache of portfolio securities.\u000a\u000a#### Portfolio.addStock(_Stock_ stock, _Float_ value, _Boolean_ _[Opt]_ clone)\u000aAdd a stock to the portfolio.  This stock is stored in the `Portfolio.stocks`.\u000a`Stock.weight` for all securities are automagically recalculated.\u000a\u000aThe parameter `stock` is the `Stock` object being added.  `value` represents the\u000amarket value for the security as a `float`.  Currency should be kept consistent.\u000aIf `clone` is `true`, a new `Stock` is created with identical `Stock.ticker`,\u000a`Stock.return`, and `Stock.average` properties.\u000a\u000a__IMPORTANT:__ If stocks are reused in multiple portfolios, or need to be kept\u000aindependent of the portfolio, they _MUST_ be cloned to prevent discrepencies with\u000ahow JavaScript passes objects by reference.\u000a\u000a```js\u000a// Add AAPL to multiple client portfolios:\u000aclientPortfolio.addStock(AAPL, 100323.33, true);\u000aotherClientPortfolio.addStock(AAPL, 1483.63, true);\u000a\u000avar open = 135.3;\u000avar close = 123.53;\u000a\u000a// If new return history needs to be added, it must be done individually.\u000aAAPL.push(open, close);\u000aclientPortfolio.stocks.AAPL.push(open, close);\u000aotherClientPortfolio.stocks.AAPL.push(open, close);\u000a```\u000a\u000a#### Portfolio.removeStock(_Stock|String_ stock)\u000aRemove a stock from the portfolio.  `Portfolio.stocks` is updated.  Additionally,\u000a`Stock.weight` for all stocks are recalculated.\u000a\u000a```js\u000a// Both of these are valid:\u000aclientPortfolio.removeStock('AAPL');\u000aclientPortfolio.removeStock(AAPL);\u000a```\u000a\u000a#### Portfolio.updateStock(_Stock|String_ stock, _Float_ value)\u000aUpdate a stock with a new market value.  Weights for all the stocks are recalculated.\u000aHowever, the new value is not validated.  Stocks are not deleted if the value is 0 or\u000anegative.\u000a\u000a#### _Array_ Portfolio.getStockTickers()\u000aGet the tickers for all the stocks in the portfolio.\u000a\u000a#### _Boolean_ Portfolio.hasStock(_Stock|String_ stock)\u000aChecks if the stock is currently in the portfolio.\u000a\u000a#### _Float_ Portfolio.calculateTotalValue()\u000aCalculate the total market value of the portfolio.  `Portfolio.value` is updated, as\u000awell as returned.  This function is called everytime `Portfolio.calculateWeights()`\u000ais called.\u000a\u000a#### Portfolio.calculateWeights()\u000aCalculate and update `Stock.weight` for all securities in the portfolio.  This\u000afunction is called whenever securities in the portfolio are altered.\u000a\u000a#### _Float_ Portfolio.calculateCovariance(_Stock_ stockA, _Stock_ stockB)\u000aCalculate the covariance between two stocks.  If `stockA` and `stockB` are the same\u000ainstance of `Stock` the function returns 1 by definition.\u000a\u000aWhile it is better to create a `Portfolio` to calculate covariance, this function can\u000abe called to examine individual stocks.\u000a\u000a```js\u000avar GOOG = new Stock('GOOG');\u000avar AAPL = new Stock('AAPL');\u000a\u000a// Pretend that we have filled out the stocks with tick history...\u000aGOOG.push(...);\u000aAAPL.push(...);\u000a\u000a// Find the covariance between Google and Apple.\u000avar covariance = Portfolio.calculateCovariance(GOOG, AAPL);\u000a```\u000a\u000a#### _Sylvester.Matrix_ Portfolio.createWeightMatrix()\u000aCreate the matrix of security weights.  We do not use `Sylvestor.Vector` because it does\u000anot have a transpose method.  `Portfolio.calculateRisk()` calls this function.\u000a\u000a#### _Sylvester.Matrix_ Portfolio.createCovarianceMatrix()\u000aCreate the covariance matrix of all securities.  `Portfolio.caulcateCovariance()` is called\u000afor every possible pair of securities.  `Portfolio.calculateRisk()` calls this function.\u000a\u000a#### _Float_ Portfolio.calculateRisk()\u000aCalculate risk for the entire portfolio.  We first check against `Portfolio.cache` to prevent any\u000aunnecessary work (i.e. securities have not been altered since last time the risk was calculated).\u000a`Portfolio.cache` and `Portfolio.risk` are then updated.\u000a","readmeFilename":"README.md","gitHead":"1b8811b88fda9ec9372a1a4ec071cf134ce74ccf","_id":"financier@0.1.1","_shasum":"7f4dd90447354ea968856001a99501064251c1c8","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"suitupalex","email":"alex@suitupalex.com"},"maintainers":[{"name":"suitupalex","email":"alex@suitupalex.com"}],"dist":{"shasum":"7f4dd90447354ea968856001a99501064251c1c8","tarball":"http://registry.npmjs.org/financier/-/financier-0.1.1.tgz"}}: financier
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:938:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Linux 2.6.32-431.23.3.el6.x86_64
44 error command "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error cwd /home/help/Projects/financier
46 error node -v v0.10.30
47 error npm -v 1.4.21
48 verbose exit [ 1, true ]
